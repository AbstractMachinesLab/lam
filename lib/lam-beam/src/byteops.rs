#[derive(Debug, Clone, Copy)]
pub enum OpCode {
    Allocate,
    AllocateHeap,
    AllocateHeapZero,
    AllocateZero,
    Apply,
    ApplyLast,
    Badmatch,
    Bif0,
    Bif1,
    Bif2,
    BsAdd,
    BsAppend,
    BsBitsToBytes,
    BsBitsToBytes2,
    BsContextToBinary,
    BsFinal,
    BsFinal2,
    BsGetBinary,
    BsGetBinary2,
    BsGetFloat,
    BsGetFloat2,
    BsGetInteger,
    BsGetInteger2,
    BsGetPosition,
    BsGetTail,
    BsGetUtf16,
    BsGetUtf32,
    BsGetUtf8,
    BsInit,
    BsInit2,
    BsInitBits,
    BsInitWritable,
    BsMatchString,
    BsNeedBuf,
    BsPrivateAppend,
    BsPutBinary,
    BsPutFloat,
    BsPutInteger,
    BsPutString,
    BsPutUtf16,
    BsPutUtf32,
    BsPutUtf8,
    BsRestore,
    BsRestore2,
    BsSave,
    BsSave2,
    BsSetPosition,
    BsSkipBits,
    BsSkipBits2,
    BsSkipUtf16,
    BsSkipUtf32,
    BsSkipUtf8,
    BsStartMatch,
    BsStartMatch2,
    BsStartMatch3,
    BsStartMatch4,
    BsTestTail,
    BsTestTail2,
    BsTestUnit,
    BsUtf16Size,
    BsUtf8Size,
    BuildStacktrace,
    Call,
    CallExt,
    CallExtLast,
    CallExtOnly,
    CallFun,
    CallLast,
    CallOnly,
    CaseEnd,
    Catch,
    CatchEnd,
    Deallocate,
    Fadd,
    Fcheckerror,
    Fclearerror,
    Fconv,
    Fdiv,
    Fmove,
    Fmul,
    Fnegate,
    Fsub,
    FuncInfo,
    GcBif1,
    GcBif2,
    GcBif3,
    GetHd,
    GetList,
    GetMapElements,
    GetTl,
    GetTupleElement,
    HasMapFields,
    IfEnd,
    Init,
    IntBand,
    IntBnot,
    IntBor,
    IntBsl,
    IntBsr,
    IntBxor,
    IntCodeEnd,
    IntDiv,
    IntRem,
    IsAtom,
    IsBinary,
    IsBitstr,
    IsBoolean,
    IsConstant,
    IsEq,
    IsEqExact,
    IsFloat,
    IsFunction,
    IsFunction2,
    IsGe,
    IsInteger,
    IsList,
    IsLt,
    IsMap,
    IsNe,
    IsNeExact,
    IsNil,
    IsNonemptyList,
    IsNumber,
    IsPid,
    IsPort,
    IsReference,
    IsTaggedTuple,
    IsTuple,
    Jump,
    Label,
    Line,
    LoopRec,
    LoopRecEnd,
    MDiv,
    MMinus,
    MPlus,
    MTimes,
    MakeFun,
    MakeFun2,
    Move,
    OnLoad,
    Put,
    PutList,
    PutLiteral,
    PutMapAssoc,
    PutMapExact,
    PutString,
    PutTuple,
    PutTuple2,
    Raise,
    RawRaise,
    RecvMark,
    RecvSet,
    RemoveMessage,
    Return,
    SelectTupleArity,
    SelectVal,
    Send,
    SetTupleElement,
    Swap,
    TestArity,
    TestHeap,
    Timeout,
    Trim,
    Try,
    TryCase,
    TryCaseEnd,
    TryEnd,
    Wait,
    WaitTimeout,
}

impl OpCode {
    pub fn arity(self) -> u8 {
        match self {
            OpCode::Allocate => 2,
            OpCode::AllocateHeap => 3,
            OpCode::AllocateHeapZero => 3,
            OpCode::AllocateZero => 2,
            OpCode::Apply => 1,
            OpCode::ApplyLast => 2,
            OpCode::Badmatch => 1,
            OpCode::Bif0 => 2,
            OpCode::Bif1 => 4,
            OpCode::Bif2 => 5,
            OpCode::BsAdd => 5,
            OpCode::BsAppend => 8,
            OpCode::BsBitsToBytes => 3,
            OpCode::BsBitsToBytes2 => 2,
            OpCode::BsContextToBinary => 1,
            OpCode::BsFinal => 2,
            OpCode::BsFinal2 => 2,
            OpCode::BsGetBinary => 5,
            OpCode::BsGetBinary2 => 7,
            OpCode::BsGetFloat => 5,
            OpCode::BsGetFloat2 => 7,
            OpCode::BsGetInteger => 5,
            OpCode::BsGetInteger2 => 7,
            OpCode::BsGetPosition => 3,
            OpCode::BsGetTail => 3,
            OpCode::BsGetUtf16 => 5,
            OpCode::BsGetUtf32 => 4,
            OpCode::BsGetUtf8 => 5,
            OpCode::BsInit => 2,
            OpCode::BsInit2 => 6,
            OpCode::BsInitBits => 6,
            OpCode::BsInitWritable => 0,
            OpCode::BsMatchString => 4,
            OpCode::BsNeedBuf => 1,
            OpCode::BsPrivateAppend => 6,
            OpCode::BsPutBinary => 5,
            OpCode::BsPutFloat => 5,
            OpCode::BsPutInteger => 5,
            OpCode::BsPutString => 2,
            OpCode::BsPutUtf16 => 3,
            OpCode::BsPutUtf32 => 3,
            OpCode::BsPutUtf8 => 3,
            OpCode::BsRestore => 1,
            OpCode::BsRestore2 => 2,
            OpCode::BsSave => 1,
            OpCode::BsSave2 => 2,
            OpCode::BsSetPosition => 2,
            OpCode::BsSkipBits => 4,
            OpCode::BsSkipBits2 => 5,
            OpCode::BsSkipUtf16 => 4,
            OpCode::BsSkipUtf32 => 3,
            OpCode::BsSkipUtf8 => 4,
            OpCode::BsStartMatch => 2,
            OpCode::BsStartMatch2 => 5,
            OpCode::BsStartMatch3 => 4,
            OpCode::BsStartMatch4 => 4,
            OpCode::BsTestTail => 2,
            OpCode::BsTestTail2 => 3,
            OpCode::BsTestUnit => 3,
            OpCode::BsUtf16Size => 3,
            OpCode::BsUtf8Size => 3,
            OpCode::BuildStacktrace => 0,
            OpCode::Call => 2,
            OpCode::CallExt => 2,
            OpCode::CallExtLast => 3,
            OpCode::CallExtOnly => 2,
            OpCode::CallFun => 1,
            OpCode::CallLast => 3,
            OpCode::CallOnly => 2,
            OpCode::CaseEnd => 1,
            OpCode::Catch => 2,
            OpCode::CatchEnd => 1,
            OpCode::Deallocate => 1,
            OpCode::Fadd => 4,
            OpCode::Fcheckerror => 1,
            OpCode::Fclearerror => 0,
            OpCode::Fconv => 2,
            OpCode::Fdiv => 4,
            OpCode::Fmove => 2,
            OpCode::Fmul => 4,
            OpCode::Fnegate => 3,
            OpCode::Fsub => 4,
            OpCode::FuncInfo => 3,
            OpCode::GcBif1 => 5,
            OpCode::GcBif2 => 6,
            OpCode::GcBif3 => 7,
            OpCode::GetHd => 2,
            OpCode::GetList => 3,
            OpCode::GetMapElements => 3,
            OpCode::GetTl => 2,
            OpCode::GetTupleElement => 3,
            OpCode::HasMapFields => 3,
            OpCode::IfEnd => 0,
            OpCode::Init => 1,
            OpCode::IntBand => 4,
            OpCode::IntBnot => 3,
            OpCode::IntBor => 4,
            OpCode::IntBsl => 4,
            OpCode::IntBsr => 4,
            OpCode::IntBxor => 4,
            OpCode::IntCodeEnd => 0,
            OpCode::IntDiv => 4,
            OpCode::IntRem => 4,
            OpCode::IsAtom => 2,
            OpCode::IsBinary => 2,
            OpCode::IsBitstr => 2,
            OpCode::IsBoolean => 2,
            OpCode::IsConstant => 2,
            OpCode::IsEq => 3,
            OpCode::IsEqExact => 3,
            OpCode::IsFloat => 2,
            OpCode::IsFunction => 2,
            OpCode::IsFunction2 => 3,
            OpCode::IsGe => 3,
            OpCode::IsInteger => 2,
            OpCode::IsList => 2,
            OpCode::IsLt => 3,
            OpCode::IsMap => 2,
            OpCode::IsNe => 3,
            OpCode::IsNeExact => 3,
            OpCode::IsNil => 2,
            OpCode::IsNonemptyList => 2,
            OpCode::IsNumber => 2,
            OpCode::IsPid => 2,
            OpCode::IsPort => 2,
            OpCode::IsReference => 2,
            OpCode::IsTaggedTuple => 4,
            OpCode::IsTuple => 2,
            OpCode::Jump => 1,
            OpCode::Label => 1,
            OpCode::Line => 1,
            OpCode::LoopRec => 2,
            OpCode::LoopRecEnd => 1,
            OpCode::MDiv => 4,
            OpCode::MMinus => 4,
            OpCode::MPlus => 4,
            OpCode::MTimes => 4,
            OpCode::MakeFun => 3,
            OpCode::MakeFun2 => 1,
            OpCode::Move => 2,
            OpCode::OnLoad => 0,
            OpCode::Put => 1,
            OpCode::PutList => 3,
            OpCode::PutLiteral => 2,
            OpCode::PutMapAssoc => 5,
            OpCode::PutMapExact => 5,
            OpCode::PutString => 3,
            OpCode::PutTuple => 2,
            OpCode::PutTuple2 => 2,
            OpCode::Raise => 2,
            OpCode::RawRaise => 0,
            OpCode::RecvMark => 1,
            OpCode::RecvSet => 1,
            OpCode::RemoveMessage => 0,
            OpCode::Return => 0,
            OpCode::SelectTupleArity => 3,
            OpCode::SelectVal => 3,
            OpCode::Send => 0,
            OpCode::SetTupleElement => 3,
            OpCode::Swap => 2,
            OpCode::TestArity => 3,
            OpCode::TestHeap => 2,
            OpCode::Timeout => 0,
            OpCode::Trim => 2,
            OpCode::Try => 2,
            OpCode::TryCase => 1,
            OpCode::TryCaseEnd => 1,
            OpCode::TryEnd => 1,
            OpCode::Wait => 1,
            OpCode::WaitTimeout => 2,
        }
    }
}

impl Into<OpCode> for u8 {
    fn into(self) -> OpCode {
        match self {
            1 => OpCode::Label,
            2 => OpCode::FuncInfo,
            3 => OpCode::IntCodeEnd,
            4 => OpCode::Call,
            5 => OpCode::CallLast,
            6 => OpCode::CallOnly,
            7 => OpCode::CallExt,
            8 => OpCode::CallExtLast,
            9 => OpCode::Bif0,
            10 => OpCode::Bif1,
            11 => OpCode::Bif2,
            12 => OpCode::Allocate,
            13 => OpCode::AllocateHeap,
            14 => OpCode::AllocateZero,
            15 => OpCode::AllocateHeapZero,
            16 => OpCode::TestHeap,
            17 => OpCode::Init,
            18 => OpCode::Deallocate,
            19 => OpCode::Return,
            20 => OpCode::Send,
            21 => OpCode::RemoveMessage,
            22 => OpCode::Timeout,
            23 => OpCode::LoopRec,
            24 => OpCode::LoopRecEnd,
            25 => OpCode::Wait,
            26 => OpCode::WaitTimeout,
            27 => OpCode::MPlus,
            28 => OpCode::MMinus,
            29 => OpCode::MTimes,
            30 => OpCode::MDiv,
            31 => OpCode::IntDiv,
            32 => OpCode::IntRem,
            33 => OpCode::IntBand,
            34 => OpCode::IntBor,
            35 => OpCode::IntBxor,
            36 => OpCode::IntBsl,
            37 => OpCode::IntBsr,
            38 => OpCode::IntBnot,
            39 => OpCode::IsLt,
            40 => OpCode::IsGe,
            41 => OpCode::IsEq,
            42 => OpCode::IsNe,
            43 => OpCode::IsEqExact,
            44 => OpCode::IsNeExact,
            45 => OpCode::IsInteger,
            46 => OpCode::IsFloat,
            47 => OpCode::IsNumber,
            48 => OpCode::IsAtom,
            49 => OpCode::IsPid,
            50 => OpCode::IsReference,
            51 => OpCode::IsPort,
            52 => OpCode::IsNil,
            53 => OpCode::IsBinary,
            54 => OpCode::IsConstant,
            55 => OpCode::IsList,
            56 => OpCode::IsNonemptyList,
            57 => OpCode::IsTuple,
            58 => OpCode::TestArity,
            59 => OpCode::SelectVal,
            60 => OpCode::SelectTupleArity,
            61 => OpCode::Jump,
            62 => OpCode::Catch,
            63 => OpCode::CatchEnd,
            64 => OpCode::Move,
            65 => OpCode::GetList,
            66 => OpCode::GetTupleElement,
            67 => OpCode::SetTupleElement,
            68 => OpCode::PutString,
            69 => OpCode::PutList,
            70 => OpCode::PutTuple,
            71 => OpCode::Put,
            72 => OpCode::Badmatch,
            73 => OpCode::IfEnd,
            74 => OpCode::CaseEnd,
            75 => OpCode::CallFun,
            76 => OpCode::MakeFun,
            77 => OpCode::IsFunction,
            78 => OpCode::CallExtOnly,
            79 => OpCode::BsStartMatch,
            80 => OpCode::BsGetInteger,
            81 => OpCode::BsGetFloat,
            82 => OpCode::BsGetBinary,
            83 => OpCode::BsSkipBits,
            84 => OpCode::BsTestTail,
            85 => OpCode::BsSave,
            86 => OpCode::BsRestore,
            87 => OpCode::BsInit,
            88 => OpCode::BsFinal,
            89 => OpCode::BsPutInteger,
            90 => OpCode::BsPutBinary,
            91 => OpCode::BsPutFloat,
            92 => OpCode::BsPutString,
            93 => OpCode::BsNeedBuf,
            94 => OpCode::Fclearerror,
            95 => OpCode::Fcheckerror,
            96 => OpCode::Fmove,
            97 => OpCode::Fconv,
            98 => OpCode::Fadd,
            99 => OpCode::Fsub,
            100 => OpCode::Fmul,
            101 => OpCode::Fdiv,
            102 => OpCode::Fnegate,
            103 => OpCode::MakeFun2,
            104 => OpCode::Try,
            105 => OpCode::TryEnd,
            106 => OpCode::TryCase,
            107 => OpCode::TryCaseEnd,
            108 => OpCode::Raise,
            109 => OpCode::BsInit2,
            110 => OpCode::BsBitsToBytes,
            111 => OpCode::BsAdd,
            112 => OpCode::Apply,
            113 => OpCode::ApplyLast,
            114 => OpCode::IsBoolean,
            115 => OpCode::IsFunction2,
            116 => OpCode::BsStartMatch2,
            117 => OpCode::BsGetInteger2,
            118 => OpCode::BsGetFloat2,
            119 => OpCode::BsGetBinary2,
            120 => OpCode::BsSkipBits2,
            121 => OpCode::BsTestTail2,
            122 => OpCode::BsSave2,
            123 => OpCode::BsRestore2,
            124 => OpCode::GcBif1,
            125 => OpCode::GcBif2,
            126 => OpCode::BsFinal2,
            127 => OpCode::BsBitsToBytes2,
            128 => OpCode::PutLiteral,
            129 => OpCode::IsBitstr,
            130 => OpCode::BsContextToBinary,
            131 => OpCode::BsTestUnit,
            132 => OpCode::BsMatchString,
            133 => OpCode::BsInitWritable,
            134 => OpCode::BsAppend,
            135 => OpCode::BsPrivateAppend,
            136 => OpCode::Trim,
            137 => OpCode::BsInitBits,
            138 => OpCode::BsGetUtf8,
            139 => OpCode::BsSkipUtf8,
            140 => OpCode::BsGetUtf16,
            141 => OpCode::BsSkipUtf16,
            142 => OpCode::BsGetUtf32,
            143 => OpCode::BsSkipUtf32,
            144 => OpCode::BsUtf8Size,
            145 => OpCode::BsPutUtf8,
            146 => OpCode::BsUtf16Size,
            147 => OpCode::BsPutUtf16,
            148 => OpCode::BsPutUtf32,
            149 => OpCode::OnLoad,
            150 => OpCode::RecvMark,
            151 => OpCode::RecvSet,
            152 => OpCode::GcBif3,
            153 => OpCode::Line,
            154 => OpCode::PutMapAssoc,
            155 => OpCode::PutMapExact,
            156 => OpCode::IsMap,
            157 => OpCode::HasMapFields,
            158 => OpCode::GetMapElements,
            159 => OpCode::IsTaggedTuple,
            160 => OpCode::BuildStacktrace,
            161 => OpCode::RawRaise,
            162 => OpCode::GetHd,
            163 => OpCode::GetTl,
            164 => OpCode::PutTuple2,
            165 => OpCode::BsGetTail,
            166 => OpCode::BsStartMatch3,
            167 => OpCode::BsGetPosition,
            168 => OpCode::BsSetPosition,
            169 => OpCode::Swap,
            170 => OpCode::BsStartMatch4,
            _ => panic!("Invalid opcode number: {}", self),
        }
    }
}
